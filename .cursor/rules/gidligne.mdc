---
description: 
globs: 
alwaysApply: true
---
---
description: Règle qui s'applique à tous les projets 
alwaysApply: true
---
# Règles d'IA – Projet TaskManager

## Contexte du projet
TaskManager est une application frontend développée avec **Angular**. Ce document définit les conventions générales, l'architecture globale et les bonnes pratiques transverses à respecter dans le projet. Pour les détails spécifiques au frontend, veuillez consulter les règles de développement dédiées au projet.

La stack technique principale est la suivante :
- **Framework** : Angular
- **UI** : Angular Material
- **Styling** : Tailwind CSS
- **Gestion de l'état (State Management)** : NgRx
- **Backend as a Service (BaaS)** : Supabase
- **Gestion des dépendances** : npm

---

## 1. Conventions de nommage et Standards Généraux
- **Nom du Projet** : TaskManager
- **Langue Principale du Code (hors libellés utilisateur)** : Anglais (pour les noms de variables, fonctions, classes, commentaires techniques, etc.)
- **Messages de Commit** : En anglais, courts et descriptifs (voir section Workflow).

---

## 2. Structure Générale du Projet
Le projet est organisé dans le dossier `TaskManager-Angular/`. La structure détaillée des dossiers (`core`, `features`, `shared`, `store`) est définie dans les conventions de développement du frontend.

---

## 3. Bonnes Pratiques et Recommandations Transverses
- **Lisibilité du code** : Privilégier un code clair, concis et bien commenté (en anglais pour les commentaires techniques).
- **Simplicité (KISS)** : Éviter la complexité inutile.
- **DRY (Don't Repeat Yourself)** : Factoriser le code pour éviter la duplication.
- **Gestion des erreurs** : Mettre en place une gestion robuste des erreurs et des exceptions.
- **Sécurité** : Appliquer les bonnes pratiques de sécurité à tous les niveaux de l'application (voir aussi règles spécifiques backend).

---

## 4. Workflow et Intégration Continue

- **Contrôle de version** : Utiliser Git avec une stratégie de branches (ex: feature, develop, main).
  - Les messages de commit doivent être en anglais, suivre un format concis (ex: `feat: add user login functionality`, `fix: resolve issue with order processing`).
- **Scripts automatiques** : Exécuter les scripts de pré-build nécessaires avant chaque build.
- **Revue de code** : Procéder à des pull requests avec des revues de code systématiques pour toutes les modifications.

---

## 5. Instructions Spécifiques pour l'IA

### ⚡ Pensée et Mémoire Séquentielle pour le Développement

#### Principe Cognitif Fondamental
Avant toute création ou modification de fonctionnalité, l'IA doit adopter une **approche de pensée séquentielle structurée** :

1. **🧠 Réflexion Préalable** : Phase de compréhension profonde de la demande et de ses implications
2. **🔗 Consultation de la Mémoire** : Recherche active des solutions, patterns et leçons antérieures
3. **💡 Synthèse Conceptuelle** : Construction mentale de la solution optimale
4. **✅ Validation Architecturale** : Vérification de la cohérence avec l'écosystème TaskManager

#### Mémoire Séquentielle du Développement
L'IA doit maintenir et exploiter une **mémoire cumulative** des développements :

- **🏗️ Patterns Architecturaux Validés** : Solutions et architectures qui ont fait leurs preuves
- **🚫 Anti-Patterns Identifiés** : Approches problématiques à éviter absolument
- **🔧 Conventions Établies** : Standards de code et pratiques adoptées dans le projet
- **📈 Évolution du Projet** : Compréhension de la trajectoire et des orientations de TaskManager
- **🎯 Décisions Techniques** : Historique des choix architecturaux et leurs justifications

#### Format de Réflexion Obligatoire
Pour chaque développement significatif, inclure une section **"💭 Analyse Développement"** :

```markdown
### 💭 Analyse Développement

#### 🧠 Compréhension de la Demande
[Analyse profonde des besoins et implications]

#### 🔗 Mémoire Consultée
- **Patterns réutilisables** : [Solutions similaires déjà implémentées]
- **Conventions établies** : [Standards déjà adoptés]
- **Anti-patterns évités** : [Erreurs à ne pas reproduire]

#### 🎯 Approche Conceptuelle
[Solution envisagée après réflexion et justification]

#### ⚠️ Points d'Attention
[Risques, défis ou aspects critiques identifiés]
```

---

### 📋 Processus de Développement Enrichi

Lorsque l'IA génère ou modifie du code pour TaskManager, elle doit :

- **Langue de communication** : Toujours répondre en Français (fr).
- **Messages de commit pour l'IA** : Toujours proposer des messages de commit en Anglais, très courts et descriptifs.
- **Développement de Fonctionnalités et Correction de Bugs avec Approche Cognitive** :
    
    **Phase Cognitive Préliminaire :**
    0. **🧠 Activation de la Réflexion** : Prendre un moment de "pensée silencieuse" pour comprendre profondément la demande
    1. **🔗 Consultation de la Mémoire Séquentielle** : Rechercher activement les patterns, solutions et leçons des développements antérieurs
    2. **💡 Synthèse Conceptuelle** : Construire mentalement l'approche optimale en capitalisant sur l'expérience accumulée
    
    **Phase de Planification Enrichie :**
    3. **📋 Analyse et Planification Réflexive** : Analyser la demande en intégrant les insights de la phase cognitive et proposer un plan détaillé des étapes envisagées (approche, fichiers impactés, stratégie de test, réutilisation de patterns). Inclure obligatoirement la section "💭 Analyse Développement". Si la fonctionnalité est conséquente, découper en sous-tâches gérables.
    4. **✅ Validation du Plan Cognitif** : Soumettre ce plan enrichi à l'utilisateur pour validation avant toute implémentation.
    
    **Phase d'Implémentation Consciente :**
    5. **🔨 Implémentation Séquentielle Guidée** : Une fois le plan validé, procéder étape par étape en maintenant la continuité cognitive (référencer les patterns utilisés, éviter les anti-patterns identifiés, informer de l'avancement à chaque étape majeure).
- **Respecter les conventions avec continuité cognitive** : Appliquer les standards de nommage et de codage en capitalisant sur les conventions déjà établies et mémorisées lors des développements antérieurs, comme défini dans les règles du projet.
- **Se référer aux règles spécifiques avec mémoire** : Pour des tâches spécialisées, consulter les règles dédiées tout en conservant la mémoire des patterns et solutions déjà validés dans ces domaines.
- **Organisation du code consciente** : Organiser le code selon la structure définie, en harmonisant avec les architectures déjà implémentées et validées.
- **Performance et Sécurité optimisées** : Appliquer les recommandations en capitalisant sur les optimisations et mesures de sécurité déjà identifiées et validées dans le projet.

### 🎯 Exigences Cognitives Transverses

**Comportements Cognitifs Requis :**
- **🧠 Toujours commencer par la réflexion** : Aucun développement sans phase de pensée préalable
- **🔗 Consulter systématiquement la mémoire** : Rechercher activement les éléments réutilisables
- **💡 Optimiser conceptuellement** : Chercher les améliorations avant l'implémentation
- **📈 Maintenir la continuité évolutive** : Inscrire chaque développement dans la trajectoire du projet

**Comportements Cognitifs Interdits :**
- **🚫 Développer sans réflexion** : Jamais d'implémentation directe sans phase cognitive
- **🚫 Ignorer l'expérience acquise** : Ne pas reproduire des solutions déjà optimisées
- **🚫 Créer sans cohérence** : Éviter les architectures qui rompent l'harmonie du projet
- **🚫 Répéter les erreurs passées** : Ne pas reproduire les anti-patterns identifiés

---

## Ressources complémentaires Générales

- @Principes SOLID

---

## 6. Impact de l'Approche Cognitive sur TaskManager

### 🎯 Philosophie du Développement Intelligent
Cette méthodologie enrichie transforme l'approche de développement de TaskManager en intégrant une **intelligence cognitive séquentielle** qui :

- **🧠 Réfléchit avant d'agir** : Chaque développement est précédé d'une analyse approfondie
- **🔗 Capitalise sur l'expérience** : Chaque solution enrichit une mémoire réutilisable
- **💡 Optimise en continu** : Les solutions s'améliorent par apprentissage cumulatif
- **🎯 Maintient la cohérence** : L'évolution du projet suit une logique architecturale harmonieuse

### 🏆 Bénéfices Attendus pour TaskManager
- **Qualité de code supérieure** : Solutions mûries par la réflexion et l'expérience
- **Cohérence architecturale** : Développements harmonieux avec l'existant
- **Efficacité accrue** : Réutilisation intelligente des patterns validés
- **Évolution maîtrisée** : Croissance du projet selon une vision cohérente
- **Réduction des erreurs** : Apprentissage cumulatif des bonnes pratiques

### 🚀 Vision à Long Terme
Chaque fonctionnalité développée avec cette approche cognitive contribue à faire de TaskManager une application de plus en plus robuste, cohérente et maintenable, où chaque nouvelle addition renforce l'ensemble plutôt que de l'alourdir.

---

*Happy coding avec intelligence cognitive ! Respectez ces règles pour garantir l'évolution optimale et cohérente du code dans TaskManager !*