---
description: 
globs: 
alwaysApply: true
---
---
description: R√®gles de d√©veloppement pour le frontend TaskManager-Angular
globs: ["TaskManager-Angular/src/**/*"]
alwaysApply: true
---

# üìò Contexte G√©n√©ral

Ce document d√©finit les conventions, l'architecture et les bonnes pratiques sp√©cifiques au d√©veloppement frontend du projet **TaskManager**.

# üß∞ Stack Technique

- **Framework** : Angular (^20.0.0)
- **Langage** : TypeScript
- **UI** : Angular Material (^20.0.1)
- **Styling** : Tailwind CSS (^4.1.8)
- **Gestion de l'√©tat (State Management)** : NgRx (^19.2.1) (`@ngrx/store`, `@ngrx/effects`, `@ngrx/entity`)
- **Backend as a Service (BaaS)** : Supabase (`@supabase/supabase-js`)
- **Server-Side Rendering (SSR)** : Angular SSR avec Express
- **Gestion des d√©pendances** : `npm` (bas√© sur la pr√©sence de `package-lock.json`)

# üß± Structure du Projet

- **`src/app/core/`** : Services essentiels (authentification, intercepteurs, guards).
- **`src/app/features/`** : Modules fonctionnels (ex: `tasks`, `dashboard`).
- **`src/app/shared/`** : Composants, directives et pipes r√©utilisables.
- **`src/app/store/`** : Fichiers NgRx (actions, reducers, effects, selectors).

# üßë‚Äçüíª Conventions de Codage

- **Composants** : Utiliser des composants autonomes (`standalone: true`).
- **Services** : Pr√©f√©rer l'injection de services via la fonction `inject()` plut√¥t que via le constructeur.
- **TypeScript** : Activer le `strict mode`. √âviter l'utilisation du type `any`.
- **Styling** : Utiliser les classes utilitaires de Tailwind CSS directement dans les templates HTML. √âviter le CSS/SCSS personnalis√© autant que possible.


- **Composants Angular** :
  - Nom de fichier au format _kebab-case_. Exemple : `user-profile.component.ts`.
  - Utiliser des composants autonomes (`standalone: true`) pour favoriser la modularit√©.
  - **Structure de fichiers obligatoire** :
    - Chaque composant DOIT avoir trois fichiers s√©par√©s :
      - `.ts` : fichier TypeScript du composant
      - `.html` : fichier template HTML (utiliser `templateUrl` dans le d√©corateur)
      - `.scss` : fichier de styles SCSS (utiliser `styleUrls` dans le d√©corateur)
    - L'utilisation de `template:` dans le d√©corateur `@Component` est **INTERDITE**. Toujours utiliser `templateUrl:` pour r√©f√©rencer un fichier `.html` externe.
- **Services Angular** :
  - Nom de fichier avec le suffixe `.service.ts`. Exemple : `authentication.service.ts`.
- **Mod√®les et Interfaces TypeScript** :
  - Nom de fichier avec le suffixe `.model.ts`. Exemple : `account.model.ts`.
  - Interfaces pr√©fix√©es par `I`. Exemple : `IUser`.
- **TypeScript** :
  - Activer le _strict mode_ pour garantir la s√©curit√© des types.
  - Ne jamais utiliser le type `any`, sauf cas exceptionnel d√ªment justifi√©.
  - Pr√©f√©rer l'injection de services via la fonction `inject()` plut√¥t que via le constructeur.
  - Utiliser des types explicites et √©viter les types implicites.
  - Appliquer des fonctions pures et favoriser l'immutabilit√©.
- **Organisation du code** :
  - Structurer les fichiers avec l'ordre suivant : imports, d√©corateur, classe, propri√©t√©s, m√©thodes.
  - Respecter l'ordre des imports : Angular > RxJS > Modules sp√©cifiques > Imports relatifs.

---

# üé® Style et Formatage

- **Linting et Formatage** :
  - Respecter imp√©rativement les r√®gles d√©finies par ESLint, Prettier et Angular ESLint.
- **CSS/SCSS** :
  - Utiliser Tailwind CSS pour le style des composants.
  - √âviter la manipulation directe du DOM ; utiliser les directives Angular appropri√©es.
  - Utiliser `NgOptimizedImage` pour l'optimisationÔ∏è BRect√©\*bliutilisation et la maintenabilit√©.
- **Performance** :
  - Impl√©menter le _lazy loading_ pour les modules non critiques au chargement initial de l'application.
  - Utiliser les nouvelles directives introduites avec Angular 19.
  - Appliquer des _pipes_ purs pour les op√©rations co√ªteuses en calcul.
- **Gestion de l'√©tat** :
  - Utiliser les `signals` pour la gestion r√©active de l'√©tat.
  - Appliquer l'`async pipe` dans les templates pour g√©rer les observables.
- **Tests** :
  - Impl√©menter des tests unitaires en suivant le pattern Arrange-Act-Assert.
  - Utiliser des outils tels que Jest ou Karma pour les tests unitaires.

---
