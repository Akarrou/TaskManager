---
description: 
globs: 
alwaysApply: false
---
# 20_task-breakdown.mdc (version enrichie & alignée TaskMaster)

## 🎯 Rôle & Contexte

Cette règle définit la méthode officielle pour transformer un PRD (Product Requirements Document) en tickets de travail structurés (epics, features, tasks, sub-tasks) dans AgroFlow, en garantissant :
- la traçabilité contractuelle,
- la cohérence des slugs,
- l’enregistrement systématique dans Supabase via le MCP,
- la conformité avec le protocole TaskMaster.
- **L’IA doit analyser et exploiter activement la structure réelle du projet (architecture, modules, patterns) et le contenu des guidelines pour adapter le découpage, la formulation et la granularité des tâches, et non se contenter de référencer les guidelines.**

---

## 1. 🗂️ Mapping PRD → Tickets

| Section PRD                   | Niveau ticket | Champs obligatoires                                         | Notes                            |
| ----------------------------- | ------------- | ----------------------------------------------------------- | -------------------------------- |
| **User Story**                | Epic          | `title`, `slug`, `type = 'epic'`, `tags += ['user-story']`  | Slug hérite du PRD (kebab‑case). |
| **Description fonctionnelle** | Feature       | `title`, `slug`, `type = 'feature'`, `parent_task_id`, `environment` | Un Feature ↔ module fonctionnel. |
| **Critère d’acceptation**     | Sub‑task      | `title`, `slug`, `task_id`, `environment`, `estimated_hours` | 1 scénario Gherkin = 1 sub‑task. |
| **Contrainte ou risque**      | Task          | `title`, `slug`, `type = 'task'`, `parent_task_id`, `priority = high`, `tags += ['risk']` | Si risque : tag `risk`.          |

- **Découpage par environnement** :  
  Si une demande concerne plusieurs environnements (frontend, backend, OPS), créer une tâche ou sous-tâche par environnement.
- **L’IA doit, pour chaque tâche, analyser la structure du projet (ex : existence de modules, composants, services, patterns) et le contenu des guidelines pour proposer un découpage pertinent, conforme et adapté à la réalité technique du projet.**

---

## 2. 🏷️ Conventions de slug / ID et hiérarchie

```text
<prd-slug>      ::= kebab-case du titre PRD (sans accents)
<epic-slug>     ::= <prd-slug>
<feature-slug>  ::= <epic-slug>:<environment>:<num>
<task-slug>     ::= <feature-slug>:<num>
<subtask-slug>  ::= <task-slug>:<num>
```
- Les slugs sont utilisés pour : branches Git (`prd/<slug>`), commits (`PRD:<slug>`), tags (`PRD:<slug>`).
- **Hiérarchie** : chaque ligne de la table `tasks` doit comporter un champ `type` (`epic`, `feature`, `task`) et un champ `parent_task_id` (uuid) pour relier chaque niveau à son parent. Les sous-tâches utilisent le champ `task_id` pour pointer vers leur tâche parente.

---

## 3. 📄 Schéma JSON TaskPlan

```json
{
  "tasks": [
    {
      "title": "Gestion des rôles",
      "slug": "gestion-roles",
      "type": "epic",
      "guideline_refs": [],
      "environment": [],
      "tags": ["user-story", "PRD:gestion-roles"]
    },
    {
      "title": "API Rôles",
      "slug": "gestion-roles:backend:1",
      "type": "feature",
      "parent_task_id": "<uuid-epic>",
      "guideline_refs": ["BG", "PG", "TA"],
      "environment": ["backend"],
      "tags": ["feature", "PRD:gestion-roles"]
    },
    {
      "title": "Endpoint POST /roles",
      "slug": "gestion-roles:backend:1:1",
      "type": "task",
      "parent_task_id": "<uuid-feature>",
      "guideline_refs": ["BG", "PG", "TA"],
      "environment": ["backend"],
      "tags": ["task", "PRD:gestion-roles"],
      "estimated_hours": 8
    }
  ],
  "subtasks": [
    {
      "title": "Implémenter scénario « Ajouter un rôle »",
      "slug": "gestion-roles:backend:1:1:1",
      "task_id": "<uuid-task>",
      "guideline_refs": ["BG", "TA"],
      "environment": ["backend"],
      "estimated_hours": 4
    }
  ]
}
```
- L’IA fournit ce JSON **et** une vue Markdown avant création effective dans Supabase.

---

## 4. ⏱️ Estimation & capacité

| T‑shirt | Heures par défaut |
| ------- | ----------------- |
| XS      | 2h                |
| S       | 4h                |
| M       | 8h                |
| L       | 16h               |
| XL      | 32h               |

- L’IA propose un sizing (`XS`‑`XL`), convertit en `estimated_hours`, l’utilisateur valide ou ajuste.

---

## 5. 🔗 Traçabilité PRD ↔ Tickets

- Chaque ticket reçoit `tags += ['PRD:<slug>']`.
- Le PRD enrichit la section **Roadmap** avec un tableau des slugs générés.
- Les liens croisés sont mis à jour automatiquement lors de la génération TaskPlan.
- Champ `guideline_refs` (array) rempli automatiquement :  
  - frontend → ["FG","PG","TA"]  
  - backend → ["BG","PG","TA"]  
  - ops → ["PG","TA"]

---

## 6. 🗄️ Enregistrement dans Supabase (MCP Supabase)

- **Obligation** :  
  Chaque ticket généré (epic, feature, task, sub-task) doit être enregistré dans la base Supabase via le MCP Supabase, qui est la source de vérité pour la gestion des tâches AgroFlow.
- **Vérification anti-doublon** :  
  Avant d’enregistrer une nouvelle tâche, vérifier si une tâche similaire (même slug ou tag PRD) existe déjà dans Supabase. Si oui, proposer la modification plutôt que la création.
- **Structure** :  
  Respecter les tables et relations attendues par le MCP Supabase (`tasks`, `subtasks`), en utilisant les bons champs (`type`, `parent_task_id`, `task_id`, etc.).
- **Anti-pattern** :  
  Ne jamais stocker les tickets uniquement en mémoire locale ou dans un autre système (ex : Redis). Supabase est la seule source de vérité.
- **Fallback** :  
  Si Supabase n’est pas disponible, stocker temporairement le JSON dans le dossier PRD, mais la synchronisation avec Supabase reste obligatoire dès que possible.

---

## 7. 🚦 Protocole d’interaction (TaskMaster)

1. **Clarification** : demander les sections PRD manquantes.
2. **Proposition** : envoyer `TaskPlan` JSON + Markdown.
3. **Validation** : créer tickets via Supabase.
4. **Feedback** : confirmer réussite ou signaler erreur.

---

## 8. 🛑 Red Flags & contrôles automatiques

| Code   | Situation                             | Action IA                  |
| ------ | ------------------------------------- | -------------------------- |
| TM‑101 | User Story sans critère d’acceptation | Demander scénarios Gherkin |
| TM‑102 | Task sans environnement unique        | Scinder la task            |
| TM‑103 | Estimation manquante                  | Proposer XS = 2h           |
| TM‑104 | Slug non conforme                     | Recalculer slug kebab‑case |
| TM‑105 | guideline_refs vide                   | Bloquer création           |

---

## 9. 📋 Exemples

### Extrait PRD

```
En tant qu’Administrateur,
Je souhaite gérer les rôles utilisateurs,
Afin de contrôler l’accès aux modules.
```

#### Gherkin

```gherkin
Scenario: Ajouter un rôle
  Given je suis sur la page de gestion des rôles
  When je clique sur « Ajouter » et renseigne « éditeur »
  Then le rôle « éditeur » apparaît dans la liste
```

### Plan de tâches généré (Markdown)

| Niveau   | Slug                         | Titre                                    | Env     | Est. |
| -------- | ---------------------------- | ---------------------------------------- | ------- | ---- |
| Epic     | gestion-roles                | Gestion des rôles                        | –       | –    |
| Feature  | gestion-roles\:backend:1     | API Rôles                                | backend | –    |
| Task     | gestion-roles\:backend:1:1   | Endpoint POST /roles                     | backend | 8h   |
| Sub-task | gestion-roles\:backend:1:1:1 | Implémenter scénario « Ajouter un rôle » | backend | 4h   |

---

## 10. 📚 Annexes

- Schéma JSON complet des tables Supabase (voir taskMaster.md).
- Exemples de requêtes INSERT/UPDATE/SELECT.
- Historique des versions.

---

**Résumé** :  
Cette règle fusionnée garantit que tout découpage de PRD en tâches de développement est fait de façon structurée, traçable et centralisée dans Supabase, selon le protocole TaskMaster.  
**Aucune tâche ne doit être créée ou suivie ailleurs que dans Supabase.**  
**L’IA doit toujours appliquer les contrôles automatiques (Red Flags) et respecter le protocole d’interaction.**
